# .arm-ci-extended.yml - Extended ARM CI for Machineflow
# ===========================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ===========================================================================
# Description: Extended CI pipeline for Machineflow, an open-source ML library 
#              on GitHub, optimized for ARM64. Includes build, linting, testing, 
#              and coverage stages with caching and parallel execution.
# Created: March 13, 2025
# Library: Machineflow (github.com/yourusername/machineflow)
# Version: 1.0.0
# Documentation: https://github.com/yourusername/machineflow#readme
# ===========================================================================

# Global variables
variables:
  DOCKER_REGISTRY: "docker.io"  # Replace with your registry
  IMAGE_NAME: "yourusername/machineflow"
  IMAGE_TAG: "$CI_COMMIT_SHORT_SHA-arm64"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHON_VERSION: "3.11"

# Stages
stages:
  - lint
  - build
  - test
  - coverage

# Default settings
default:
  tags:
    - arm64  # Target ARM64 runners (e.g., AWS Graviton, Raspberry Pi)
  retry:
    max: 2  # Retry failed jobs up to 2 times
  interruptible: true  # Allow job cancellation for faster pipelines

# Cache for Python dependencies
cache:
  key: "arm64-python-$PYTHON_VERSION"
  paths:
    - $PIP_CACHE_DIR
    - .cache/pypoetry  # If using Poetry

# Linting (Code Quality)
lint_arm64:
  stage: lint
  image: python:$PYTHON_VERSION-slim
  before_script:
    - apt-get update && apt-get install -y gcc
    - pip install flake8 black isort
  script:
    - echo "Linting Machineflow code on ARM64"
    - flake8 . --max-line-length=88 --exclude=venv,__pycache__
    - black --check .
    - isort --check-only --diff .
  rules:
    - if: '$CI_COMMIT_BRANCH || $CI_MERGE_REQUEST'
  assignees:
    - "tilakrayal"  # Core team
    - "Venkat6871"

# Build ARM64 Docker image
build_arm64:
  stage: build
  image: docker:latest
  services:
    - docker:dind  # Docker-in-Docker for ARM builds
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""  # Disable TLS for simplicity
  script:
    - echo "Building Machineflow Docker image for ARM64"
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD" $DOCKER_REGISTRY
    - docker build --platform linux/arm64 -f Dockerfile.arm64 -t $DOCKER_REGISTRY/$IMAGE_NAME:$IMAGE_TAG .
    - docker push $DOCKER_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
  artifacts:
    paths:
      - docker_manifest.txt
    expire_in: 2 weeks
  rules:
    - if: '$CI_COMMIT_BRANCH || $CI_MERGE_REQUEST'
  assignees:
    - "tilakrayal"
    - "Venkat6871"

# Unit Tests (Parallelized)
test_unit_arm64:
  stage: test
  image: $DOCKER_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
  parallel: 3  # Run 3 parallel instances
  script:
    - echo "Running unit tests on ARM64 (parallel job $CI_NODE_INDEX/$CI_NODE_TOTAL)"
    - python -m pip install pytest pytest-xdist
    - pytest tests/ --junitxml=test-reports/unit-$CI_NODE_INDEX.xml -n auto
  artifacts:
    reports:
      junit: test-reports/unit-*.xml
    expire_in: 1 month
  rules:
    - if: '$CI_COMMIT_BRANCH || $CI_MERGE_REQUEST'
  assignees:
    - "joker-eph"  # Compiler team
    - "sanjoy"

# Security Tests (Filesystem/Security Path)
test_security_arm64:
  stage: test
  image: $DOCKER_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
  script:
    - echo "Running security tests on ARM64"
    - python -m pip install bandit safety
    - bandit -r machineflow/ -f txt -o security-report.txt  # Static analysis
    - safety check --full-report  # Dependency vulnerability scan
  artifacts:
    paths:
      - security-report.txt
    expire_in: 1 month
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
  assignees:
    - "mihaimaruseac"  # Filesystem/security assignee

# Test CUDA compatibility (if applicable)
test_cuda_arm64:
  stage: test
  image: $DOCKER_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
  script:
    - echo "Testing CUDA compatibility on ARM64"
    - python -m pip install torch  # Example CUDA dep
    - python -c "import torch; print('CUDA available:', torch.cuda.is_available())"
  rules:
    - if: '$CI_COMMIT_BRANCH || $CI_MERGE_REQUEST'
      when: manual  # Manual trigger due to CUDA runner requirements
  assignees:
    - "joker-eph"
    - "sanjoy"

# Coverage Report
coverage_arm64:
  stage: coverage
  image: $DOCKER_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
  script:
    - echo "Generating coverage report on ARM64"
    - python -m pip install pytest-cov
    - pytest tests/ --cov=machineflow --cov-report=xml --cov-report=html
    - coverage report --fail-under=80  # Fail if coverage < 80%
  artifacts:
    paths:
      - coverage.xml
      - htmlcov/
    expire_in: 1 month
  coverage: '/Total.*?([0-9]{1,3}\.[0-9]+%)/'  # Parse coverage percentage
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
  assignees:
    - "tilakrayal"
    - "Venkat6871"

# CUDA Comment (Documentation)
cuda_comment: >
  This CI pipeline includes CUDA testing for ARM64:
    - Ensure CUDA 11.8 is configured on ARM64 runners.
    - Update `$LD_LIBRARY_PATH` with CUDA/cuDNN paths.
    - Manual trigger due to specialized runner needs.
  *Report issues to assignees!*
